{"version":3,"file":"static/js/823.aae473c9.chunk.js","mappings":"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","sources":["pages/GameDetailPage.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport \"../styles/GameDetailPage.css\";\n\nfunction GameDetailPage() {\n  const { id } = useParams();\n  const [game, setGame] = useState(null);\n  const navigate = useNavigate();\n  const [loading, setLoading] = useState(true);\n  const [rating, setRating] = useState(\"\");\n  const [playTime, setPlayTime] = useState(\"\");\n  const [comment, setComment] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [canRate, setCanRate] = useState(true);\n\n  const username = localStorage.getItem(\"loggedInUser\");\n\n  useEffect(() => {\n    if (!id) {\n      console.error(\"Missing ID parameter!\");\n      navigate(\"/\");\n      return;\n    }\n\n    fetch(`${process.env.REACT_APP_API_URL}/games/${id}`)\n      .then((response) => {\n        if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);\n        return response.json();\n      })\n      .then((data) => {\n        setGame(data);\n        setLoading(false);\n      })\n      .catch((error) => {\n        console.error(\"Error fetching game details:\", error);\n        setLoading(false);\n      });\n\n    fetch(`${process.env.REACT_APP_API_URL}/users/${username}`)\n      .then((res) => res.json())\n      .then((userData) => setCanRate(userData.canRate))\n      .catch((err) => console.error(\"canRate kontrol√º ba≈üarƒ±sƒ±z:\", err));\n  }, [id, navigate, username]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n  \n    const parsedRating = Number(rating);\n    const parsedPlayTime = Number(playTime);\n  \n    console.log(\"parsedRating:\", parsedRating);\n    console.log(\"parsedPlayTime:\", parsedPlayTime);\n  \n    if (isNaN(parsedRating) || isNaN(parsedPlayTime)) {\n      alert(\"Rating and Play Time must be valid numbers.\");\n      return;\n    }\n  \n    try {\n      const response = await fetch(`${process.env.REACT_APP_API_URL}/games/${game._id}/interact`, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          rating: parsedRating,\n          playTime: parsedPlayTime,\n          comment,\n          username\n        }),\n      });\n  \n      if (!response.ok) throw new Error(\"Server error!\");\n  \n      const { updatedGame } = await response.json();\n      setGame(updatedGame);\n      setSubmitted(true);\n      setRating(\"\");\n      setPlayTime(\"\");\n      setComment(\"\");\n      alert(\"Your comment was submitted successfully!\");\n    } catch (err) {\n      console.error(\"Submit error:\", err);\n      alert(\"Submission failed due to server error.\");\n    }\n  };\n  \n  \n  \n  // üîê G√ºvenli kontrol\n  if (loading) return <p>Loading...</p>;\n  if (!game) return <p>Game not found.</p>;\n\n  return (\n    <div className=\"game-detail-page\">\n      <div className=\"game-detail-container\">\n        <div className=\"left-panel\">\n          <img src={game?.photo} alt={game?.name || \"Game\"} />\n          <p><strong>Average Rating:</strong> {game.rating || \"Not rated yet\"}</p>\n          <p><strong>Genre:</strong> {game.genres?.join(', ') || 'Not specified'}</p>\n          <p><strong>Release Date:</strong> {game.releaseDate || 'Unknown'}</p>\n        </div>\n\n        <div className=\"right-panel\">\n          <h2>Comments and Ratings</h2>\n          {game.comments && game.comments.length > 0 ? (\n            game.comments.map((c, i) => (\n              <div key={i} className=\"comment-box\">\n                <strong>{c.username}</strong> {c.rating && \"‚≠ê\".repeat(c.rating)}<br />\n                {c.text} <span>({c.playTime} hours)</span>\n              </div>\n            ))\n          ) : (\n            <p>No comments yet.</p>\n          )}\n\n          {game.isRatingEnabled && canRate ? (\n            <>\n              <h3>Leave a Comment & Rate</h3>\n              <form onSubmit={handleSubmit} className=\"interact-form\">\n                <label>Rating (Stars):</label>\n                <select value={rating} onChange={(e) => setRating(e.target.value)} required>\n                  <option value=\"\">Select</option>\n                  <option value=\"1\">‚≠ê</option>\n                  <option value=\"2\">‚≠ê‚≠ê</option>\n                  <option value=\"3\">‚≠ê‚≠ê‚≠ê</option>\n                  <option value=\"4\">‚≠ê‚≠ê‚≠ê‚≠ê</option>\n                  <option value=\"5\">‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê</option>\n                </select>\n\n                <label>Play Time (hours):</label>\n                <input type=\"number\" value={playTime} onChange={(e) => setPlayTime(e.target.value)} min=\"1\" required />\n\n                <label>Comment:</label>\n                <textarea value={comment} onChange={(e) => setComment(e.target.value)} placeholder=\"Your thoughts...\" required />\n\n                <button type=\"submit\">Submit</button>\n                {submitted && <p className=\"submitted-msg\">Submitted successfully!</p>}\n              </form>\n            </>\n          ) : (\n            <p style={{ color: 'red' }}>Rating and comments are disabled for this game or you are not authorized.</p>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default GameDetailPage;\n"],"names":["_game$genres","id","useParams","game","setGame","useState","navigate","useNavigate","loading","setLoading","rating","setRating","playTime","setPlayTime","comment","setComment","submitted","setSubmitted","canRate","setCanRate","username","localStorage","getItem","useEffect","console","error","fetch","then","response","ok","Error","status","json","data","catch","res","userData","err","_jsx","children","className","_jsxs","src","photo","alt","name","genres","join","releaseDate","comments","length","map","c","i","repeat","text","isRatingEnabled","_Fragment","onSubmit","async","e","preventDefault","parsedRating","Number","parsedPlayTime","log","isNaN","alert","_id","method","headers","body","JSON","stringify","updatedGame","value","onChange","target","required","type","min","placeholder","style","color"],"sourceRoot":""}